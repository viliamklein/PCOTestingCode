// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ImageMessages.proto

#include "ImageMessages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace ImageMessagesPCO {
constexpr ASIimage::ASIimage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : imagedata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , header_(0)
  , id_(0)
  , messagebytelength_(0)
  , bitdepth_(0)
  , width_(0)
  , height_(0){}
struct ASIimageDefaultTypeInternal {
  constexpr ASIimageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ASIimageDefaultTypeInternal() {}
  union {
    ASIimage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ASIimageDefaultTypeInternal _ASIimage_default_instance_;
constexpr PCOImage::PCOImage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : imagedata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , header_(0)
  , id_(0)
  , messagebytelength_(0)
  , binning_(0)
  , width_(0)
  , height_(0){}
struct PCOImageDefaultTypeInternal {
  constexpr PCOImageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PCOImageDefaultTypeInternal() {}
  union {
    PCOImage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PCOImageDefaultTypeInternal _PCOImage_default_instance_;
}  // namespace ImageMessagesPCO
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ImageMessages_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ImageMessages_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ImageMessages_2eproto = nullptr;

const uint32_t TableStruct_ImageMessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ImageMessagesPCO::ASIimage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ImageMessagesPCO::ASIimage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ImageMessagesPCO::ASIimage, header_),
  PROTOBUF_FIELD_OFFSET(::ImageMessagesPCO::ASIimage, id_),
  PROTOBUF_FIELD_OFFSET(::ImageMessagesPCO::ASIimage, messagebytelength_),
  PROTOBUF_FIELD_OFFSET(::ImageMessagesPCO::ASIimage, bitdepth_),
  PROTOBUF_FIELD_OFFSET(::ImageMessagesPCO::ASIimage, width_),
  PROTOBUF_FIELD_OFFSET(::ImageMessagesPCO::ASIimage, height_),
  PROTOBUF_FIELD_OFFSET(::ImageMessagesPCO::ASIimage, imagedata_),
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  PROTOBUF_FIELD_OFFSET(::ImageMessagesPCO::PCOImage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ImageMessagesPCO::PCOImage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ImageMessagesPCO::PCOImage, header_),
  PROTOBUF_FIELD_OFFSET(::ImageMessagesPCO::PCOImage, id_),
  PROTOBUF_FIELD_OFFSET(::ImageMessagesPCO::PCOImage, messagebytelength_),
  PROTOBUF_FIELD_OFFSET(::ImageMessagesPCO::PCOImage, binning_),
  PROTOBUF_FIELD_OFFSET(::ImageMessagesPCO::PCOImage, width_),
  PROTOBUF_FIELD_OFFSET(::ImageMessagesPCO::PCOImage, height_),
  PROTOBUF_FIELD_OFFSET(::ImageMessagesPCO::PCOImage, imagedata_),
  1,
  2,
  3,
  4,
  5,
  6,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, -1, sizeof(::ImageMessagesPCO::ASIimage)},
  { 20, 33, -1, sizeof(::ImageMessagesPCO::PCOImage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ImageMessagesPCO::_ASIimage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ImageMessagesPCO::_PCOImage_default_instance_),
};

const char descriptor_table_protodef_ImageMessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023ImageMessages.proto\022\020ImageMessagesPCO\""
  "\205\001\n\010ASIimage\022\016\n\006header\030\001 \002(\017\022\n\n\002id\030\002 \002(\017"
  "\022\031\n\021messageByteLength\030\003 \002(\017\022\020\n\010bitDepth\030"
  "\004 \002(\017\022\r\n\005width\030\005 \002(\017\022\016\n\006height\030\006 \002(\017\022\021\n\t"
  "imageData\030\007 \001(\014\"\204\001\n\010PCOImage\022\016\n\006header\030\001"
  " \002(\017\022\n\n\002id\030\002 \002(\017\022\031\n\021messageByteLength\030\003 "
  "\002(\017\022\017\n\007binning\030\004 \002(\017\022\r\n\005width\030\005 \002(\017\022\016\n\006h"
  "eight\030\006 \002(\017\022\021\n\timageData\030\007 \001(\014"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ImageMessages_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ImageMessages_2eproto = {
  false, false, 310, descriptor_table_protodef_ImageMessages_2eproto, "ImageMessages.proto", 
  &descriptor_table_ImageMessages_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_ImageMessages_2eproto::offsets,
  file_level_metadata_ImageMessages_2eproto, file_level_enum_descriptors_ImageMessages_2eproto, file_level_service_descriptors_ImageMessages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_ImageMessages_2eproto_getter() {
  return &descriptor_table_ImageMessages_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ImageMessages_2eproto(&descriptor_table_ImageMessages_2eproto);
namespace ImageMessagesPCO {

// ===================================================================

class ASIimage::_Internal {
 public:
  using HasBits = decltype(std::declval<ASIimage>()._has_bits_);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_messagebytelength(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bitdepth(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_imagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000007e) ^ 0x0000007e) != 0;
  }
};

ASIimage::ASIimage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ImageMessagesPCO.ASIimage)
}
ASIimage::ASIimage(const ASIimage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  imagedata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    imagedata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_imagedata()) {
    imagedata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_imagedata(), 
      GetArenaForAllocation());
  }
  ::memcpy(&header_, &from.header_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&header_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:ImageMessagesPCO.ASIimage)
}

inline void ASIimage::SharedCtor() {
imagedata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  imagedata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&header_)) + sizeof(height_));
}

ASIimage::~ASIimage() {
  // @@protoc_insertion_point(destructor:ImageMessagesPCO.ASIimage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ASIimage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  imagedata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ASIimage::ArenaDtor(void* object) {
  ASIimage* _this = reinterpret_cast< ASIimage* >(object);
  (void)_this;
}
void ASIimage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ASIimage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ASIimage::Clear() {
// @@protoc_insertion_point(message_clear_start:ImageMessagesPCO.ASIimage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    imagedata_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&header_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&header_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ASIimage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required sfixed32 header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_header(&has_bits);
          header_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr);
          ptr += sizeof(int32_t);
        } else
          goto handle_unusual;
        continue;
      // required sfixed32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr);
          ptr += sizeof(int32_t);
        } else
          goto handle_unusual;
        continue;
      // required sfixed32 messageByteLength = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_messagebytelength(&has_bits);
          messagebytelength_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr);
          ptr += sizeof(int32_t);
        } else
          goto handle_unusual;
        continue;
      // required sfixed32 bitDepth = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_bitdepth(&has_bits);
          bitdepth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr);
          ptr += sizeof(int32_t);
        } else
          goto handle_unusual;
        continue;
      // required sfixed32 width = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr);
          ptr += sizeof(int32_t);
        } else
          goto handle_unusual;
        continue;
      // required sfixed32 height = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr);
          ptr += sizeof(int32_t);
        } else
          goto handle_unusual;
        continue;
      // optional bytes imageData = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_imagedata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ASIimage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ImageMessagesPCO.ASIimage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required sfixed32 header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed32ToArray(1, this->_internal_header(), target);
  }

  // required sfixed32 id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed32ToArray(2, this->_internal_id(), target);
  }

  // required sfixed32 messageByteLength = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed32ToArray(3, this->_internal_messagebytelength(), target);
  }

  // required sfixed32 bitDepth = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed32ToArray(4, this->_internal_bitdepth(), target);
  }

  // required sfixed32 width = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed32ToArray(5, this->_internal_width(), target);
  }

  // required sfixed32 height = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed32ToArray(6, this->_internal_height(), target);
  }

  // optional bytes imageData = 7;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_imagedata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ImageMessagesPCO.ASIimage)
  return target;
}

size_t ASIimage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ImageMessagesPCO.ASIimage)
  size_t total_size = 0;

  if (_internal_has_header()) {
    // required sfixed32 header = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_id()) {
    // required sfixed32 id = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_messagebytelength()) {
    // required sfixed32 messageByteLength = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_bitdepth()) {
    // required sfixed32 bitDepth = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_width()) {
    // required sfixed32 width = 5;
    total_size += 1 + 4;
  }

  if (_internal_has_height()) {
    // required sfixed32 height = 6;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t ASIimage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ImageMessagesPCO.ASIimage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000007e) ^ 0x0000007e) == 0) {  // All required fields are present.
    // required sfixed32 header = 1;
    total_size += 1 + 4;

    // required sfixed32 id = 2;
    total_size += 1 + 4;

    // required sfixed32 messageByteLength = 3;
    total_size += 1 + 4;

    // required sfixed32 bitDepth = 4;
    total_size += 1 + 4;

    // required sfixed32 width = 5;
    total_size += 1 + 4;

    // required sfixed32 height = 6;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes imageData = 7;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_imagedata());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ASIimage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ASIimage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ASIimage::GetClassData() const { return &_class_data_; }

void ASIimage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ASIimage *>(to)->MergeFrom(
      static_cast<const ASIimage &>(from));
}


void ASIimage::MergeFrom(const ASIimage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ImageMessagesPCO.ASIimage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_imagedata(from._internal_imagedata());
    }
    if (cached_has_bits & 0x00000002u) {
      header_ = from.header_;
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      messagebytelength_ = from.messagebytelength_;
    }
    if (cached_has_bits & 0x00000010u) {
      bitdepth_ = from.bitdepth_;
    }
    if (cached_has_bits & 0x00000020u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000040u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ASIimage::CopyFrom(const ASIimage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImageMessagesPCO.ASIimage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASIimage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ASIimage::InternalSwap(ASIimage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &imagedata_, lhs_arena,
      &other->imagedata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ASIimage, height_)
      + sizeof(ASIimage::height_)
      - PROTOBUF_FIELD_OFFSET(ASIimage, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ASIimage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ImageMessages_2eproto_getter, &descriptor_table_ImageMessages_2eproto_once,
      file_level_metadata_ImageMessages_2eproto[0]);
}

// ===================================================================

class PCOImage::_Internal {
 public:
  using HasBits = decltype(std::declval<PCOImage>()._has_bits_);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_messagebytelength(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_binning(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_imagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000007e) ^ 0x0000007e) != 0;
  }
};

PCOImage::PCOImage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ImageMessagesPCO.PCOImage)
}
PCOImage::PCOImage(const PCOImage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  imagedata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    imagedata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_imagedata()) {
    imagedata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_imagedata(), 
      GetArenaForAllocation());
  }
  ::memcpy(&header_, &from.header_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&header_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:ImageMessagesPCO.PCOImage)
}

inline void PCOImage::SharedCtor() {
imagedata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  imagedata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&header_)) + sizeof(height_));
}

PCOImage::~PCOImage() {
  // @@protoc_insertion_point(destructor:ImageMessagesPCO.PCOImage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PCOImage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  imagedata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PCOImage::ArenaDtor(void* object) {
  PCOImage* _this = reinterpret_cast< PCOImage* >(object);
  (void)_this;
}
void PCOImage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PCOImage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PCOImage::Clear() {
// @@protoc_insertion_point(message_clear_start:ImageMessagesPCO.PCOImage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    imagedata_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&header_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&header_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PCOImage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required sfixed32 header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_header(&has_bits);
          header_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr);
          ptr += sizeof(int32_t);
        } else
          goto handle_unusual;
        continue;
      // required sfixed32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr);
          ptr += sizeof(int32_t);
        } else
          goto handle_unusual;
        continue;
      // required sfixed32 messageByteLength = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_messagebytelength(&has_bits);
          messagebytelength_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr);
          ptr += sizeof(int32_t);
        } else
          goto handle_unusual;
        continue;
      // required sfixed32 binning = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_binning(&has_bits);
          binning_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr);
          ptr += sizeof(int32_t);
        } else
          goto handle_unusual;
        continue;
      // required sfixed32 width = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr);
          ptr += sizeof(int32_t);
        } else
          goto handle_unusual;
        continue;
      // required sfixed32 height = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr);
          ptr += sizeof(int32_t);
        } else
          goto handle_unusual;
        continue;
      // optional bytes imageData = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_imagedata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PCOImage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ImageMessagesPCO.PCOImage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required sfixed32 header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed32ToArray(1, this->_internal_header(), target);
  }

  // required sfixed32 id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed32ToArray(2, this->_internal_id(), target);
  }

  // required sfixed32 messageByteLength = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed32ToArray(3, this->_internal_messagebytelength(), target);
  }

  // required sfixed32 binning = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed32ToArray(4, this->_internal_binning(), target);
  }

  // required sfixed32 width = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed32ToArray(5, this->_internal_width(), target);
  }

  // required sfixed32 height = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed32ToArray(6, this->_internal_height(), target);
  }

  // optional bytes imageData = 7;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_imagedata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ImageMessagesPCO.PCOImage)
  return target;
}

size_t PCOImage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ImageMessagesPCO.PCOImage)
  size_t total_size = 0;

  if (_internal_has_header()) {
    // required sfixed32 header = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_id()) {
    // required sfixed32 id = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_messagebytelength()) {
    // required sfixed32 messageByteLength = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_binning()) {
    // required sfixed32 binning = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_width()) {
    // required sfixed32 width = 5;
    total_size += 1 + 4;
  }

  if (_internal_has_height()) {
    // required sfixed32 height = 6;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t PCOImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ImageMessagesPCO.PCOImage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000007e) ^ 0x0000007e) == 0) {  // All required fields are present.
    // required sfixed32 header = 1;
    total_size += 1 + 4;

    // required sfixed32 id = 2;
    total_size += 1 + 4;

    // required sfixed32 messageByteLength = 3;
    total_size += 1 + 4;

    // required sfixed32 binning = 4;
    total_size += 1 + 4;

    // required sfixed32 width = 5;
    total_size += 1 + 4;

    // required sfixed32 height = 6;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes imageData = 7;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_imagedata());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PCOImage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PCOImage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PCOImage::GetClassData() const { return &_class_data_; }

void PCOImage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PCOImage *>(to)->MergeFrom(
      static_cast<const PCOImage &>(from));
}


void PCOImage::MergeFrom(const PCOImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ImageMessagesPCO.PCOImage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_imagedata(from._internal_imagedata());
    }
    if (cached_has_bits & 0x00000002u) {
      header_ = from.header_;
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      messagebytelength_ = from.messagebytelength_;
    }
    if (cached_has_bits & 0x00000010u) {
      binning_ = from.binning_;
    }
    if (cached_has_bits & 0x00000020u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000040u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PCOImage::CopyFrom(const PCOImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImageMessagesPCO.PCOImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PCOImage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PCOImage::InternalSwap(PCOImage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &imagedata_, lhs_arena,
      &other->imagedata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PCOImage, height_)
      + sizeof(PCOImage::height_)
      - PROTOBUF_FIELD_OFFSET(PCOImage, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PCOImage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ImageMessages_2eproto_getter, &descriptor_table_ImageMessages_2eproto_once,
      file_level_metadata_ImageMessages_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ImageMessagesPCO
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ImageMessagesPCO::ASIimage* Arena::CreateMaybeMessage< ::ImageMessagesPCO::ASIimage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ImageMessagesPCO::ASIimage >(arena);
}
template<> PROTOBUF_NOINLINE ::ImageMessagesPCO::PCOImage* Arena::CreateMaybeMessage< ::ImageMessagesPCO::PCOImage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ImageMessagesPCO::PCOImage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
