// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ImageMessages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ImageMessages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ImageMessages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ImageMessages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ImageMessages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ImageMessages_2eproto;
namespace ImageMessagesPCO {
class ASIimage;
struct ASIimageDefaultTypeInternal;
extern ASIimageDefaultTypeInternal _ASIimage_default_instance_;
class PCOImage;
struct PCOImageDefaultTypeInternal;
extern PCOImageDefaultTypeInternal _PCOImage_default_instance_;
}  // namespace ImageMessagesPCO
PROTOBUF_NAMESPACE_OPEN
template<> ::ImageMessagesPCO::ASIimage* Arena::CreateMaybeMessage<::ImageMessagesPCO::ASIimage>(Arena*);
template<> ::ImageMessagesPCO::PCOImage* Arena::CreateMaybeMessage<::ImageMessagesPCO::PCOImage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ImageMessagesPCO {

// ===================================================================

class ASIimage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ImageMessagesPCO.ASIimage) */ {
 public:
  inline ASIimage() : ASIimage(nullptr) {}
  ~ASIimage() override;
  explicit constexpr ASIimage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ASIimage(const ASIimage& from);
  ASIimage(ASIimage&& from) noexcept
    : ASIimage() {
    *this = ::std::move(from);
  }

  inline ASIimage& operator=(const ASIimage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ASIimage& operator=(ASIimage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ASIimage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ASIimage* internal_default_instance() {
    return reinterpret_cast<const ASIimage*>(
               &_ASIimage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ASIimage& a, ASIimage& b) {
    a.Swap(&b);
  }
  inline void Swap(ASIimage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ASIimage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ASIimage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ASIimage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ASIimage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ASIimage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ASIimage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ImageMessagesPCO.ASIimage";
  }
  protected:
  explicit ASIimage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageDataFieldNumber = 7,
    kHeaderFieldNumber = 1,
    kIdFieldNumber = 2,
    kMessageByteLengthFieldNumber = 3,
    kBitDepthFieldNumber = 4,
    kWidthFieldNumber = 5,
    kHeightFieldNumber = 6,
  };
  // optional bytes imageData = 7;
  bool has_imagedata() const;
  private:
  bool _internal_has_imagedata() const;
  public:
  void clear_imagedata();
  const std::string& imagedata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_imagedata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_imagedata();
  PROTOBUF_NODISCARD std::string* release_imagedata();
  void set_allocated_imagedata(std::string* imagedata);
  private:
  const std::string& _internal_imagedata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_imagedata(const std::string& value);
  std::string* _internal_mutable_imagedata();
  public:

  // required sfixed32 header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  int32_t header() const;
  void set_header(int32_t value);
  private:
  int32_t _internal_header() const;
  void _internal_set_header(int32_t value);
  public:

  // required sfixed32 id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // required sfixed32 messageByteLength = 3;
  bool has_messagebytelength() const;
  private:
  bool _internal_has_messagebytelength() const;
  public:
  void clear_messagebytelength();
  int32_t messagebytelength() const;
  void set_messagebytelength(int32_t value);
  private:
  int32_t _internal_messagebytelength() const;
  void _internal_set_messagebytelength(int32_t value);
  public:

  // required sfixed32 bitDepth = 4;
  bool has_bitdepth() const;
  private:
  bool _internal_has_bitdepth() const;
  public:
  void clear_bitdepth();
  int32_t bitdepth() const;
  void set_bitdepth(int32_t value);
  private:
  int32_t _internal_bitdepth() const;
  void _internal_set_bitdepth(int32_t value);
  public:

  // required sfixed32 width = 5;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  int32_t width() const;
  void set_width(int32_t value);
  private:
  int32_t _internal_width() const;
  void _internal_set_width(int32_t value);
  public:

  // required sfixed32 height = 6;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ImageMessagesPCO.ASIimage)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imagedata_;
  int32_t header_;
  int32_t id_;
  int32_t messagebytelength_;
  int32_t bitdepth_;
  int32_t width_;
  int32_t height_;
  friend struct ::TableStruct_ImageMessages_2eproto;
};
// -------------------------------------------------------------------

class PCOImage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ImageMessagesPCO.PCOImage) */ {
 public:
  inline PCOImage() : PCOImage(nullptr) {}
  ~PCOImage() override;
  explicit constexpr PCOImage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PCOImage(const PCOImage& from);
  PCOImage(PCOImage&& from) noexcept
    : PCOImage() {
    *this = ::std::move(from);
  }

  inline PCOImage& operator=(const PCOImage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PCOImage& operator=(PCOImage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PCOImage& default_instance() {
    return *internal_default_instance();
  }
  static inline const PCOImage* internal_default_instance() {
    return reinterpret_cast<const PCOImage*>(
               &_PCOImage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PCOImage& a, PCOImage& b) {
    a.Swap(&b);
  }
  inline void Swap(PCOImage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PCOImage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PCOImage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PCOImage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PCOImage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PCOImage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PCOImage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ImageMessagesPCO.PCOImage";
  }
  protected:
  explicit PCOImage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageDataFieldNumber = 7,
    kHeaderFieldNumber = 1,
    kIdFieldNumber = 2,
    kMessageByteLengthFieldNumber = 3,
    kBinningFieldNumber = 4,
    kWidthFieldNumber = 5,
    kHeightFieldNumber = 6,
  };
  // optional bytes imageData = 7;
  bool has_imagedata() const;
  private:
  bool _internal_has_imagedata() const;
  public:
  void clear_imagedata();
  const std::string& imagedata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_imagedata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_imagedata();
  PROTOBUF_NODISCARD std::string* release_imagedata();
  void set_allocated_imagedata(std::string* imagedata);
  private:
  const std::string& _internal_imagedata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_imagedata(const std::string& value);
  std::string* _internal_mutable_imagedata();
  public:

  // required sfixed32 header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  int32_t header() const;
  void set_header(int32_t value);
  private:
  int32_t _internal_header() const;
  void _internal_set_header(int32_t value);
  public:

  // required sfixed32 id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // required sfixed32 messageByteLength = 3;
  bool has_messagebytelength() const;
  private:
  bool _internal_has_messagebytelength() const;
  public:
  void clear_messagebytelength();
  int32_t messagebytelength() const;
  void set_messagebytelength(int32_t value);
  private:
  int32_t _internal_messagebytelength() const;
  void _internal_set_messagebytelength(int32_t value);
  public:

  // required sfixed32 binning = 4;
  bool has_binning() const;
  private:
  bool _internal_has_binning() const;
  public:
  void clear_binning();
  int32_t binning() const;
  void set_binning(int32_t value);
  private:
  int32_t _internal_binning() const;
  void _internal_set_binning(int32_t value);
  public:

  // required sfixed32 width = 5;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  int32_t width() const;
  void set_width(int32_t value);
  private:
  int32_t _internal_width() const;
  void _internal_set_width(int32_t value);
  public:

  // required sfixed32 height = 6;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ImageMessagesPCO.PCOImage)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imagedata_;
  int32_t header_;
  int32_t id_;
  int32_t messagebytelength_;
  int32_t binning_;
  int32_t width_;
  int32_t height_;
  friend struct ::TableStruct_ImageMessages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ASIimage

// required sfixed32 header = 1;
inline bool ASIimage::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ASIimage::has_header() const {
  return _internal_has_header();
}
inline void ASIimage::clear_header() {
  header_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t ASIimage::_internal_header() const {
  return header_;
}
inline int32_t ASIimage::header() const {
  // @@protoc_insertion_point(field_get:ImageMessagesPCO.ASIimage.header)
  return _internal_header();
}
inline void ASIimage::_internal_set_header(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  header_ = value;
}
inline void ASIimage::set_header(int32_t value) {
  _internal_set_header(value);
  // @@protoc_insertion_point(field_set:ImageMessagesPCO.ASIimage.header)
}

// required sfixed32 id = 2;
inline bool ASIimage::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ASIimage::has_id() const {
  return _internal_has_id();
}
inline void ASIimage::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t ASIimage::_internal_id() const {
  return id_;
}
inline int32_t ASIimage::id() const {
  // @@protoc_insertion_point(field_get:ImageMessagesPCO.ASIimage.id)
  return _internal_id();
}
inline void ASIimage::_internal_set_id(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void ASIimage::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ImageMessagesPCO.ASIimage.id)
}

// required sfixed32 messageByteLength = 3;
inline bool ASIimage::_internal_has_messagebytelength() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ASIimage::has_messagebytelength() const {
  return _internal_has_messagebytelength();
}
inline void ASIimage::clear_messagebytelength() {
  messagebytelength_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t ASIimage::_internal_messagebytelength() const {
  return messagebytelength_;
}
inline int32_t ASIimage::messagebytelength() const {
  // @@protoc_insertion_point(field_get:ImageMessagesPCO.ASIimage.messageByteLength)
  return _internal_messagebytelength();
}
inline void ASIimage::_internal_set_messagebytelength(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  messagebytelength_ = value;
}
inline void ASIimage::set_messagebytelength(int32_t value) {
  _internal_set_messagebytelength(value);
  // @@protoc_insertion_point(field_set:ImageMessagesPCO.ASIimage.messageByteLength)
}

// required sfixed32 bitDepth = 4;
inline bool ASIimage::_internal_has_bitdepth() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ASIimage::has_bitdepth() const {
  return _internal_has_bitdepth();
}
inline void ASIimage::clear_bitdepth() {
  bitdepth_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t ASIimage::_internal_bitdepth() const {
  return bitdepth_;
}
inline int32_t ASIimage::bitdepth() const {
  // @@protoc_insertion_point(field_get:ImageMessagesPCO.ASIimage.bitDepth)
  return _internal_bitdepth();
}
inline void ASIimage::_internal_set_bitdepth(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  bitdepth_ = value;
}
inline void ASIimage::set_bitdepth(int32_t value) {
  _internal_set_bitdepth(value);
  // @@protoc_insertion_point(field_set:ImageMessagesPCO.ASIimage.bitDepth)
}

// required sfixed32 width = 5;
inline bool ASIimage::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ASIimage::has_width() const {
  return _internal_has_width();
}
inline void ASIimage::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t ASIimage::_internal_width() const {
  return width_;
}
inline int32_t ASIimage::width() const {
  // @@protoc_insertion_point(field_get:ImageMessagesPCO.ASIimage.width)
  return _internal_width();
}
inline void ASIimage::_internal_set_width(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  width_ = value;
}
inline void ASIimage::set_width(int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:ImageMessagesPCO.ASIimage.width)
}

// required sfixed32 height = 6;
inline bool ASIimage::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ASIimage::has_height() const {
  return _internal_has_height();
}
inline void ASIimage::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline int32_t ASIimage::_internal_height() const {
  return height_;
}
inline int32_t ASIimage::height() const {
  // @@protoc_insertion_point(field_get:ImageMessagesPCO.ASIimage.height)
  return _internal_height();
}
inline void ASIimage::_internal_set_height(int32_t value) {
  _has_bits_[0] |= 0x00000040u;
  height_ = value;
}
inline void ASIimage::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:ImageMessagesPCO.ASIimage.height)
}

// optional bytes imageData = 7;
inline bool ASIimage::_internal_has_imagedata() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ASIimage::has_imagedata() const {
  return _internal_has_imagedata();
}
inline void ASIimage::clear_imagedata() {
  imagedata_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ASIimage::imagedata() const {
  // @@protoc_insertion_point(field_get:ImageMessagesPCO.ASIimage.imageData)
  return _internal_imagedata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ASIimage::set_imagedata(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 imagedata_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ImageMessagesPCO.ASIimage.imageData)
}
inline std::string* ASIimage::mutable_imagedata() {
  std::string* _s = _internal_mutable_imagedata();
  // @@protoc_insertion_point(field_mutable:ImageMessagesPCO.ASIimage.imageData)
  return _s;
}
inline const std::string& ASIimage::_internal_imagedata() const {
  return imagedata_.Get();
}
inline void ASIimage::_internal_set_imagedata(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  imagedata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ASIimage::_internal_mutable_imagedata() {
  _has_bits_[0] |= 0x00000001u;
  return imagedata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ASIimage::release_imagedata() {
  // @@protoc_insertion_point(field_release:ImageMessagesPCO.ASIimage.imageData)
  if (!_internal_has_imagedata()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = imagedata_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (imagedata_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    imagedata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ASIimage::set_allocated_imagedata(std::string* imagedata) {
  if (imagedata != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  imagedata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imagedata,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (imagedata_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    imagedata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ImageMessagesPCO.ASIimage.imageData)
}

// -------------------------------------------------------------------

// PCOImage

// required sfixed32 header = 1;
inline bool PCOImage::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PCOImage::has_header() const {
  return _internal_has_header();
}
inline void PCOImage::clear_header() {
  header_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t PCOImage::_internal_header() const {
  return header_;
}
inline int32_t PCOImage::header() const {
  // @@protoc_insertion_point(field_get:ImageMessagesPCO.PCOImage.header)
  return _internal_header();
}
inline void PCOImage::_internal_set_header(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  header_ = value;
}
inline void PCOImage::set_header(int32_t value) {
  _internal_set_header(value);
  // @@protoc_insertion_point(field_set:ImageMessagesPCO.PCOImage.header)
}

// required sfixed32 id = 2;
inline bool PCOImage::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PCOImage::has_id() const {
  return _internal_has_id();
}
inline void PCOImage::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t PCOImage::_internal_id() const {
  return id_;
}
inline int32_t PCOImage::id() const {
  // @@protoc_insertion_point(field_get:ImageMessagesPCO.PCOImage.id)
  return _internal_id();
}
inline void PCOImage::_internal_set_id(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void PCOImage::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ImageMessagesPCO.PCOImage.id)
}

// required sfixed32 messageByteLength = 3;
inline bool PCOImage::_internal_has_messagebytelength() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PCOImage::has_messagebytelength() const {
  return _internal_has_messagebytelength();
}
inline void PCOImage::clear_messagebytelength() {
  messagebytelength_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t PCOImage::_internal_messagebytelength() const {
  return messagebytelength_;
}
inline int32_t PCOImage::messagebytelength() const {
  // @@protoc_insertion_point(field_get:ImageMessagesPCO.PCOImage.messageByteLength)
  return _internal_messagebytelength();
}
inline void PCOImage::_internal_set_messagebytelength(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  messagebytelength_ = value;
}
inline void PCOImage::set_messagebytelength(int32_t value) {
  _internal_set_messagebytelength(value);
  // @@protoc_insertion_point(field_set:ImageMessagesPCO.PCOImage.messageByteLength)
}

// required sfixed32 binning = 4;
inline bool PCOImage::_internal_has_binning() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PCOImage::has_binning() const {
  return _internal_has_binning();
}
inline void PCOImage::clear_binning() {
  binning_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t PCOImage::_internal_binning() const {
  return binning_;
}
inline int32_t PCOImage::binning() const {
  // @@protoc_insertion_point(field_get:ImageMessagesPCO.PCOImage.binning)
  return _internal_binning();
}
inline void PCOImage::_internal_set_binning(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  binning_ = value;
}
inline void PCOImage::set_binning(int32_t value) {
  _internal_set_binning(value);
  // @@protoc_insertion_point(field_set:ImageMessagesPCO.PCOImage.binning)
}

// required sfixed32 width = 5;
inline bool PCOImage::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PCOImage::has_width() const {
  return _internal_has_width();
}
inline void PCOImage::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t PCOImage::_internal_width() const {
  return width_;
}
inline int32_t PCOImage::width() const {
  // @@protoc_insertion_point(field_get:ImageMessagesPCO.PCOImage.width)
  return _internal_width();
}
inline void PCOImage::_internal_set_width(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  width_ = value;
}
inline void PCOImage::set_width(int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:ImageMessagesPCO.PCOImage.width)
}

// required sfixed32 height = 6;
inline bool PCOImage::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PCOImage::has_height() const {
  return _internal_has_height();
}
inline void PCOImage::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline int32_t PCOImage::_internal_height() const {
  return height_;
}
inline int32_t PCOImage::height() const {
  // @@protoc_insertion_point(field_get:ImageMessagesPCO.PCOImage.height)
  return _internal_height();
}
inline void PCOImage::_internal_set_height(int32_t value) {
  _has_bits_[0] |= 0x00000040u;
  height_ = value;
}
inline void PCOImage::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:ImageMessagesPCO.PCOImage.height)
}

// optional bytes imageData = 7;
inline bool PCOImage::_internal_has_imagedata() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PCOImage::has_imagedata() const {
  return _internal_has_imagedata();
}
inline void PCOImage::clear_imagedata() {
  imagedata_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PCOImage::imagedata() const {
  // @@protoc_insertion_point(field_get:ImageMessagesPCO.PCOImage.imageData)
  return _internal_imagedata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PCOImage::set_imagedata(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 imagedata_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ImageMessagesPCO.PCOImage.imageData)
}
inline std::string* PCOImage::mutable_imagedata() {
  std::string* _s = _internal_mutable_imagedata();
  // @@protoc_insertion_point(field_mutable:ImageMessagesPCO.PCOImage.imageData)
  return _s;
}
inline const std::string& PCOImage::_internal_imagedata() const {
  return imagedata_.Get();
}
inline void PCOImage::_internal_set_imagedata(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  imagedata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PCOImage::_internal_mutable_imagedata() {
  _has_bits_[0] |= 0x00000001u;
  return imagedata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PCOImage::release_imagedata() {
  // @@protoc_insertion_point(field_release:ImageMessagesPCO.PCOImage.imageData)
  if (!_internal_has_imagedata()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = imagedata_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (imagedata_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    imagedata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PCOImage::set_allocated_imagedata(std::string* imagedata) {
  if (imagedata != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  imagedata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imagedata,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (imagedata_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    imagedata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ImageMessagesPCO.PCOImage.imageData)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ImageMessagesPCO

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ImageMessages_2eproto
